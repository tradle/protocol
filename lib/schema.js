// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
const encodings = require('protocol-buffers-encodings')
const varint = encodings.varint
const skip = encodings.skip

const ECSignature = exports.ECSignature = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

const ECPubKey = exports.ECPubKey = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineECSignature()
defineECPubKey()

function defineECSignature () {
  ECSignature.encodingLength = encodingLength
  ECSignature.encode = encode
  ECSignature.decode = decode

  function encodingLength (obj) {
    let length = 0
    if (!defined(obj.pubKey)) throw new Error("pubKey is required")
    var len = ECPubKey.encodingLength(obj.pubKey)
    length += varint.encodingLength(len)
    length += 1 + len
    if (!defined(obj.sig)) throw new Error("sig is required")
    var len = encodings.bytes.encodingLength(obj.sig)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    const oldOffset = offset
    if (!defined(obj.pubKey)) throw new Error("pubKey is required")
    buf[offset++] = 10
    varint.encode(ECPubKey.encodingLength(obj.pubKey), buf, offset)
    offset += varint.encode.bytes
    ECPubKey.encode(obj.pubKey, buf, offset)
    offset += ECPubKey.encode.bytes
    if (!defined(obj.sig)) throw new Error("sig is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.sig, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    const oldOffset = offset
    const obj = {
      pubKey: null,
      sig: null
    }
    let found0 = false
    let found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      const prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      const tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.pubKey = ECPubKey.decode(buf, offset, offset + len)
        offset += ECPubKey.decode.bytes
        found0 = true
        break
        case 2:
        obj.sig = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineECPubKey () {
  ECPubKey.encodingLength = encodingLength
  ECPubKey.encode = encode
  ECPubKey.decode = decode

  function encodingLength (obj) {
    let length = 0
    if (!defined(obj.curve)) throw new Error("curve is required")
    var len = encodings.string.encodingLength(obj.curve)
    length += 1 + len
    if (!defined(obj.pub)) throw new Error("pub is required")
    var len = encodings.bytes.encodingLength(obj.pub)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    const oldOffset = offset
    if (!defined(obj.curve)) throw new Error("curve is required")
    buf[offset++] = 10
    encodings.string.encode(obj.curve, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.pub)) throw new Error("pub is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.pub, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    const oldOffset = offset
    const obj = {
      curve: "",
      pub: null
    }
    let found0 = false
    let found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      const prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      const tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.curve = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.pub = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
